<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.1</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
    <UserSecretsId>a6a3fa06-7c79-4d29-9aed-539249a02d6f</UserSecretsId>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>bin\Debug\netcoreapp2.1\TheWeekendGolfer.xml</DocumentationFile>
    <GenerateSerializationAssemblies>Auto</GenerateSerializationAssemblies>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\Release\netcoreapp2.1\TheWeekendGolfer.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="ClientApp\src\app\course\course.component.spec.ts" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="CsvHelper" Version="12.1.1" />
    <PackageReference Include="Microsoft.AspNet.Identity.Core" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.1.8" />
    <PackageReference Include="Microsoft.AspNetCore.App" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="2.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="2.1.6" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="2.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.StaticFiles" Version="2.1.1" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="2.1.8" />
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="2.1.1" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="4.0.1" />
  </ItemGroup>



  <ItemGroup>
    <EmbeddedResource Include="Data\GolfDB\SeedData\SlopeRatings.csv" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Data\ApplicationDB\Migrations\" />
    <Folder Include="Data\GolfDB\Migrations\" />
  </ItemGroup>

  <ItemGroup>
    <TypeScriptCompile Include="ClientApp\src\app\course\course.component.spec.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\course\course.component.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\models\handicap.model.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\models\partner.model.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\models\scoreView.model.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\models\user.model.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\models\course.model.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\models\golfRound.model.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\models\player.model.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\models\score.model.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\partner\add-partner-dialog.component.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\player\add-player.component.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\partner.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\golfRound.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\player.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\scores.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\course.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\user.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\user\loginDialog.component.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\user\signUpDialog.component.ts" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
